{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FileUpload","className","handleFileUpload","label","type","id","onChange","e","accept","App","useState","processedData","setProcessedData","offset","setOffset","file","fileReadHandler","errorHandler","reader","FileReader","readAsText","onload","onerror","getText","target","files","event","data","rows","split","regex","fields","slice","reduce","finalData","row","dataPoint","dp","value","index","fieldValue","trim","processCSVData","result","alert","onClick","disabled","Object","keys","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAGA,SAASA,EAAT,GAA0D,IAArCC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,iBAAkBC,EAAO,EAAPA,MAChD,OACE,yBAAKF,UAAWA,GACd,+BACGE,EACD,2BACEC,KAAK,OACLC,GAAG,aACHC,SAAU,SAACC,GAAD,OAAOL,EAAiBK,IAClCC,OAAO,WAgHFC,MAzGf,WACE,IADa,EAE2BC,mBAAS,MAFpC,mBAERC,EAFQ,KAEOC,EAFP,OAGaF,mBAAS,GAHtB,mBAGRG,EAHQ,KAGAC,EAHA,KAMb,SAASZ,EAAiBK,IAK1B,SAAiBQ,EAAMC,EAAiBC,GACtC,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,WAAWL,GAClBG,EAAOG,OAASL,EAChBE,EAAOI,QAAUL,EAPjBM,CAF0B,YACbhB,EAAEiB,OAAOC,MADI,MAEbT,EAAiBC,GAWhC,SAASD,EAAgBU,GACvB,IACIf,EASN,SAAwBgB,GAEtB,IAAIC,EAAOD,EAAKE,MAAM,SAGhBC,EAAQ,sDAEVC,EAASH,EAAK,GAAGC,MAAMC,GAiB3B,OAdoBF,EAAKI,MAAM,GAAGC,QAAO,SAACC,EAAWC,GAEnD,IAAIC,EAAYD,EAAIN,MAAMC,GAAOG,QAAO,SAACI,EAAIC,EAAOC,GAClD,IAAIC,EAAaT,EAAOQ,GAIxB,OAHGC,IACDH,EAAGG,EAAWC,QAAUH,GAEnBD,IACN,IACH,MAAM,GAAN,mBAAWH,GAAX,CAAsBE,MACrB,IA7BiBM,CADNhB,EAAMF,OAAOmB,QAG3B/B,EAAiBD,GAGnB,SAASM,IACP2B,MAAM,yBA8BR,OACE,yBAAK3C,UAAYU,EAA4B,gBAAZ,WAC7BA,EAA0H,KAA1G,kBAACX,EAAD,CAAYC,UAAW,eAAgBC,iBAAkBA,EAAkBC,MAAO,oBACnGQ,GAAiBA,EAAc,GAC9B,oCACE,kBAACX,EAAD,CAAYC,UAAW,eAAgBC,iBAAkBA,EAAkBC,MAAO,wBAClF,yBAAKF,UAAU,oBACb,4BACE4C,QAAS,kBAAM/B,EAAUD,EAhEvB,IAiEFiC,SAAqB,IAAXjC,GAFZ,QAMA,4BACEgC,QAAS,kBAAM/B,EAAUD,EAtEvB,IAuEFiC,SAAUjC,GAAWkC,OAAOC,KAAKrC,EAAc,IAAIsC,QAFrD,SAOF,+BACE,+BACE,4BACGF,OAAOC,KAAKrC,EAAc,IACxBqB,MAAMnB,EAhFT,EAgFyBA,GACtBqC,KAAI,SAACC,GAAD,OACH,4BAAKA,QAIb,+BACGxC,EAAcuC,KAAI,SAACd,GAAD,OACjB,4BACGW,OAAOC,KAAKZ,GACVJ,MAAMnB,EA1FX,EA0F2BA,GACtBqC,KAAI,SAACC,GACJ,OAAO,4BAAKf,EAAUe,cAOlC,OC3GUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6a82717f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction FileUpload({className, handleFileUpload, label}){\n  return (\n    <div className={className}>\n      <label>\n        {label}\n        <input\n          type=\"file\"\n          id=\"file-input\"\n          onChange={(e) => handleFileUpload(e)}\n          accept=\".csv\"\n        />\n      </label>\n    </div>\n  );\n}\n\nfunction App() {\n  const limit = 5;\n  let [processedData, setProcessedData] = useState(null);\n  let [offset, setOffset] = useState(0);\n\n\n  function handleFileUpload(e){\n    let [file] = e.target.files;\n    getText(file,fileReadHandler, errorHandler);\n  }\n  \n  function getText(file, fileReadHandler, errorHandler){\n    let reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = fileReadHandler;\n    reader.onerror = errorHandler;\n  \n  }\n  \n  function fileReadHandler(event){\n    let csvData = event.target.result;\n    let processedData = processCSVData(csvData);\n    \n    setProcessedData(processedData);\n  }\n  \n  function errorHandler(){\n    alert('Error in reading file')\n  }\n  \n  function processCSVData(data){\n    \n    let rows = data.split(/\\n|\\r/);\n    \n  \n    const regex = /(?:,|\\n|^)(\"(?:(?:\"\")*[^\"]*)*\"|[^\",\\n]*|(?:\\n|$))/gm;\n  \n    let fields = rows[0].split(regex);\n    \n  \n    let formattedData = rows.slice(1).reduce((finalData, row) => {\n      \n      let dataPoint = row.split(regex).reduce((dp, value, index) => {\n        let fieldValue = fields[index];\n        if(fieldValue){\n          dp[fieldValue.trim()] = value;\n        }\n        return dp;\n      }, {})\n      return [...finalData, dataPoint]\n    }, []);\n\n\n  \n    return formattedData\n  }\n\n  return (\n    <div className={!processedData ? 'wrapper' : 'table-wrapper' }>\n      {!processedData ? <FileUpload className={\"file-upload1\"} handleFileUpload={handleFileUpload} label={'Upload Csv File'} /> : null}\n      {processedData && processedData[0] ? (\n        <>\n          <FileUpload className={\"file-upload2\"} handleFileUpload={handleFileUpload} label={'Upload Another File'} />\n          <div className=\"button-container\">\n            <button\n              onClick={() => setOffset(offset - limit)}\n              disabled={offset === 0}\n            >\n              Prev\n            </button>\n            <button\n              onClick={() => setOffset(offset + limit)}\n              disabled={offset >=  Object.keys(processedData[0]).length}\n            >\n              Next\n            </button>\n          </div>\n          <table>\n            <thead>\n              <tr>\n                {Object.keys(processedData[0])\n                  .slice(offset, limit + offset)\n                  .map((key) => (\n                    <th>{key}</th>\n                  ))}\n              </tr>\n            </thead>\n            <tbody>\n              {processedData.map((dataPoint) => (\n                <tr>\n                  {Object.keys(dataPoint)\n                    .slice(offset, limit + offset)\n                    .map((key) => {\n                      return <td>{dataPoint[key]}</td>;\n                    })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </>\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}